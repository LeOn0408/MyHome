@page "/"


<PageTitle>Service Manager</PageTitle>

<div class="container mt-4">
    <h1>Контрольная панель сервисов</h1>

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="RefreshServices">Refresh</button>
        <button class="btn btn-success" @onclick="AddNewService">Add New Service</button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var service in services)
                {
                    <tr>
                        <td>@service.Name</td>
                        <td>@service.Type</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(service.Status)">
                                @service.Status
                            </span>
                        </td>
                        <td>
                            @if (service.Status == ServiceStatus.Stopped)
                            {
                                <button class="btn btn-sm btn-success"
                                        @onclick="() => StartService(service)">
                                    Start
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-danger"
                                        @onclick="() => StopService(service)">
                                    Stop
                                </button>
                            }
                            <button class="btn btn-sm btn-danger ms-2"
                                    @onclick="() => RemoveService(service)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Service> services = new();

    protected override void OnInitialized()
    {
        // Initial test data
        services = new List<Service>
        {
            new Service { Id = 1, Name = "Game Server", Type = ServiceType.Gaming, Status = ServiceStatus.Running },
            new Service { Id = 2, Name = "Web API", Type = ServiceType.Web, Status = ServiceStatus.Stopped },
            new Service { Id = 3, Name = "Database", Type = ServiceType.Database, Status = ServiceStatus.Running }
        };
    }

    private void RefreshServices()
    {
        // Here you would typically fetch from API
        services = services.ToList(); // Simulate refresh
    }

    private void StartService(Service service)
    {
        service.Status = ServiceStatus.Running;
        // Add actual service start logic here
    }

    private void StopService(Service service)
    {
        service.Status = ServiceStatus.Stopped;
        // Add actual service stop logic here
    }

    private void AddNewService()
    {
        var newService = new Service
            {
                Id = services.Max(s => s.Id) + 1,
                Name = "New Service",
                Type = ServiceType.Other,
                Status = ServiceStatus.Stopped
            };
        services.Add(newService);
    }

    private void RemoveService(Service service)
    {
        services.Remove(service);
    }

    private string GetStatusBadgeClass(ServiceStatus status)
    {
        return status switch
        {
            ServiceStatus.Running => "bg-success",
            ServiceStatus.Stopped => "bg-danger",
            _ => "bg-secondary"
        };
    }

    public class Service
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public ServiceType Type { get; set; }
        public ServiceStatus Status { get; set; }
    }

    public enum ServiceType
    {
        Gaming,
        Web,
        Database,
        Other
    }

    public enum ServiceStatus
    {
        Running,
        Stopped
    }
}